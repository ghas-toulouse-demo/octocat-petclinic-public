# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_parameters:
    name: Define Build Parameters
    runs-on: ubuntu-22.04

    # We need to share details across job boundaries, expose the step outputs at the job level
    outputs:
      container_name: ${{ steps.build_params.outputs.container_name }}
      container_owner: ${{ steps.build_params.outputs.container_owner }}
      maven_changelist: ${{ steps.build_params.outputs.maven_changelist }}
      maven_sha1: ${{ steps.build_params.outputs.maven_sha1 }}
      github_branch_name: ${{ steps.build_params.outputs.github_ref_branch_name }}
      github_short_sha: ${{ steps.build_params.outputs.github_short_sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Define Build Parameters
        id: build_params
        uses: actions/github-script@v6
        with:
          script: |
            const scriptPath = require('path').resolve('./.github/workflows/scripts/buildParameters.js')
              , buildParameters = require(scriptPath);
            ;
            buildParameters(context, core).injectBuildParameters();


  build_and_test:
    runs-on: ubuntu-latest
    
    needs:
      - build_parameters

    # We need to share details across job boundaries, expose the step outs at the job level
    outputs:
      jar_version: ${{ steps.maven_version.outputs.version }}
      artifact_name: ${{ steps.artifact_parameters.outputs.artifact_name }}
      artifact_path: ${{ steps.artifact_parameters.outputs.artifact_path }}
          
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v3
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven

      - name: Build Test and Package
        run: |
          mvn package -B \
            -Dsha1="${{ needs.build_parameters.outputs.maven_sha1 }}" \
            -Dchangelist="${{ needs.build_parameters.outputs.maven_changelist }}" \
            -Dgithub.repository="${GITHUB_REPOSITORY}"
        shell: bash

      - name: Set artifact parameters
        if: matrix.os == 'ubuntu-22.04'
        id: artifact_parameters
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput('artifact_name', `application-jar`);
            core.setOutput('artifact_path', `target`);

      - name: Upload application jar artifact
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact_parameters.outputs.artifact_name }}
          path: ${{ steps.artifact_parameters.outputs.artifact_path }}/petclinic-${{ steps.maven_version.outputs.version }}.jar
          if-no-files-found: error

  build_and_publish_container:
    name: Container Build - application
    runs-on: ubuntu-22.04
    needs: 
      - build_and_test
      - build_parameters
  
    permissions:
      contents: read
      packages: write
      statuses: write

    steps:

      # print the environment variables
      - name: Print environment variables
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH"
          echo "GITHUB_SERVER_URL: $GITHUB_SERVER_URL"
          echo "GITHUB_API_URL: $GITHUB_API_URL"
          echo "GITHUB_GRAPHQL_URL: $GITHUB_GRAPHQL_URL"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH"
          echo "GITHUB_SERVER_URL: $GITHUB_SERVER_URL"
          echo "GITHUB_API_URL: $GITHUB_API_URL"
          echo "GITHUB_GRAPHQL_URL: $GITHUB_GRAPHQL_URL"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"

      # print build_and_test outputs
      - name: Print build_and_test outputs
        run: |
          echo "jar_version: ${{ needs.build_and_test.outputs.jar_version }}"
          echo "artifact_name: ${{ needs.build_and_test.outputs.artifact_name }}"
          echo "artifact_path: ${{ needs.build_and_test.outputs.artifact_path }}"

      # print build_parameters outputs
      - name: Print build_parameters outputs
        run: |
          echo "container_owner: ${{ needs.build_parameters.outputs.container_owner }}"
          echo "container_name: ${{ needs.build_parameters.outputs.container_name }}"
          echo "maven_changelist: ${{ steps.build_params.outputs.maven_changelist }}
          echo "maven_sha1: ${{ steps.build_params.outputs.maven_sha1 }}
          echo "github_branch_name: ${{ steps.build_params.outputs.github_ref_branch_name }}
          echo "github_short_sha: ${{ steps.build_params.outputs.github_short_sha }}

      - name: Checkout
        uses: actions/checkout@v3


      # Use Docker Layers to build the application
      # ideally we should use the jar from the build_and_test job
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.1.0


      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ needs.build_parameters.outputs.container_owner }}/${{ needs.build_parameters.outputs.container_name }}

      - name: Sign in to GitHub Container Registry
        id: login_ghcr
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: ghcr.io

      - name: Build and push
        id: container_build_and_push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}   
                 
      - name: Publish Container Image as a Status
        id: container_image_status
        uses: octodemo/github-status-action@v3
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          state: success
          context: Container Image Published - app
          description: ${{ fromJSON(steps.container_build_and_push.outputs.metadata)['image.name'] }}

  deploy_to_kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-22.04
    needs: 
      - build_parameters
      - build_and_publish_container
    permissions:
      actions: read
      contents: read
    environment: 
      name: production
      url: ${{steps.kube-deploy.outputs.service-url}}  
  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
  
    # connect to azure using AZURE_CREDENTIALS
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract branch name
      id: extract_branch
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - name: Get AKS Credentials
      id: getContext
      run: |
        az aks get-credentials --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
        echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV    


    # apply kubernetes deployment
    - name: Apply Kubernetes Deployment
      id: kube-deploy
      run: |
        kubectl create namespace petclinic-${{ steps.extract_branch.outputs.branch }} --dry-run=client -o json | kubectl apply -f -                 
        sed -i "s/:main/:${{ steps.extract_branch.outputs.branch }}/g" kubernetes/deployment.yml 
        kubectl apply -n  petclinic-${{ steps.extract_branch.outputs.branch }} -f kubernetes/deployment.yml
        kubectl -n  petclinic-${{ steps.extract_branch.outputs.branch }} rollout restart deployment octocat-petclinic
        echo "🕚  - Wait 20s for service deployment"
        sleep 15s
        IP_SERVICE=$(kubectl get services -n petclinic-${{ steps.extract_branch.outputs.branch }}  -o json | jq -r '.items[] |  select(.metadata.name == "octocat-petclinic-service") | .status.loadBalancer? .ingress[]?|.ip ')
        echo "IP_SERVICE=$IP_SERVICE" >> $GITHUB_ENV
        echo "🏁 - Service ${{ github.repository }} update in petclinic : http://$IP_SERVICE:8080 "
        echo "::set-output name=service-url::http://$IP_SERVICE:8080"   